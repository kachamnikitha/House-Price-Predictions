xlim(1000,10000)+ ylim(0,500)
labs(x="LotArea for Choosing a House",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
windows(width=6, height=6)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",linetype =1) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.5)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= df$SaleType , y= (SalePrice)/100000, fill = df$Condition1)) +
xlab('Type of Sale') + ylab('Sale Price in 100K') +
ggtitle('House Price Predictions - sale type vs sale price') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("C:/Users/Nikitha/Desktop/STAT515/finalproject")
library(sqldf)
df= read.csv('/Users/Nikitha/Desktop/STAT515/finalproject/dataset_finalproject_MCD.CSV')
sum(is.na(df))
colnames(df) = c('State', 'statecode', 'county', 'countycode', 'Deaths', 'Population', 'cruderate', 'ageadjrate','Ages','Causes')
SumbyState = YearSum = sqldf(' select State, sum(Deaths), sum(Population),
count(*), avg(cruderate), avg(ageadjrate) from df group by State')
SumbyState$pdr = SumbyState$`sum(Deaths)`*100/SumbyState$`sum(Population)`
colnames(SumbyState) = c('State', 'Deaths', 'Population', 'Frequency', 'cruderate', 'ageadjrate', 'PDR')
mmap = read.csv('/Users/Nikitha/Desktop/STAT515/finalproject/to_micromaps.csv')
mmap = mmap[,-1]
mmap$Deaths[is.na(mmap$Deaths)] <- median(mmap$Deaths, na.rm=TRUE)
mmap$Population[is.na(mmap$Population)] <- median(mmap$Population, na.rm=TRUE)
mmap$PDR[is.na(mmap$PDR)] <- median(mmap$PDR, na.rm=TRUE)
row.names(mmap) = mmap$id
med1<- mean(mmap$Deaths)
med2<- mean(mmap$Population)
med3<- mean(mmap$PDR)
library(micromapST)
Dot_Redesign_Data <- data.frame(
type=c('mapcum','id','dot','dot', 'dot'),
lab1=rep("",5),
lab2=c('' ,'','Deaths','Population', 'Death Rate'),
lab3=c('','','Mean = 826878.62','Mean = 100247387.9','Mean = 0.85012'),
col1 = c(NA,NA,2,3,7),
refVals=c(NA,NA,med1,med2,med3)
)
t(Dot_Redesign_Data)
head(Dot_Redesign_Data)
fName = "MicroMap.pdf"
pdf(file=fName,width=8,height=10)
micromapST(mmap, Dot_Redesign_Data,
sortVar=3,ascend=FALSE,title=c("Multiple Causes Of Death In USA",""))
dev.off()
library(corrplot)
cordf = df[,5:10]
cordf$Deaths = as.numeric(cordf$Deaths)
cordf$Population = as.numeric(cordf$Population)
cordf$ageadjrate = as.numeric(cordf$ageadjrate)
cordf$cruderate = as.numeric(cordf$cruderate)
cordf$Ages = as.numeric(cordf$Ages)
cordf$Causes = as.numeric(cordf$Causes)
a= cor(cordf)
corrplot(a, method = c("number"), title = 'Correlation Between Features')
df2 = df
df2$State = as.numeric(df$State)
fit1 = lm(Deaths ~ State + Population + Ages + Causes ,data = df)
fit2 = lm(Deaths ~  Population + Frequency +
cruderate + ageadjrate  ,data = SumbyState)
library(MASS)
upfit1 = stepAIC(fit1, direction = 'forward')
library(ggplot2)
q= ggplot(data=SumbyState, aes(x=SumbyState$State, y=SumbyState$PDR, fill = PDR)) +
xlab('States') + ylab('Death Rate')+ ggtitle('Percentage Death Rate by Population for USA States') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(m1)
View(df2)
str(df)
str(df2)
setwd("C:/Users/Nikitha/Desktop/STAT515/project")
library(MASS)
df = read.csv('train.csv')
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
coln = c('LotFrontage', 'Alley',
'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',
'Electrical', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish',
'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature')
train = df[ , !(names(df) %in% coln)]
trDF= train
library(corrplot)
train[] <- lapply(train, function(x) as.numeric(x))
df1 <- train[1:20]
cordf <-  cor(df1)
corrplot(cordf,method = c("circle"),mar=c(1,1,1,1),title = 'Correlation Matrix')
df2= df[ , colSums(is.na(df)) == 0]
library(randomForest)
model <- randomForest(SalePrice ~ . , data = df2, ntree=500, importance = T)
setwd("C:/Users/Nikitha/Desktop/STAT515/project")
library(MASS)
df = read.csv('train.csv')
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
coln = c('LotFrontage', 'Alley',
'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',
'Electrical', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish',
'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature')
train = df[ , !(names(df) %in% coln)]
trDF= train
windows(width=6, height=6)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
library(ggplot2)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=6, height=6)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=6, height=6)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Proximity to various conditions') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=6, height=6)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Proximity to various conditions') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
hw <- theme_gray()+ theme(
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5),
plot.caption=element_text(hjust=-.5),
strip.text.y = element_blank(),
strip.background=element_rect(fill=rgb(.9,.95,1),
colour=gray(.5), size=.2),
panel.border=element_rect(fill=FALSE,colour=gray(.70)),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(0.10,"cm"),
panel.spacing.y = unit(0.05,"cm"),
axis.ticks=element_blank(),
axis.text=element_text(colour="black"),
axis.text.y=element_text(margin=margin(0,3,0,3)),
axis.text.x=element_text(margin=margin(-1,0,3,0))
)
scat <- ggplot(trDF, aes( x= LotArea , y=(SalePrice)/1000 ))+ xlim(1000,10000)
scat + geom_point() + stat_smooth() +hw
scat + geom_point( aes( color = BldgType) ) + hw
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)+
labs(x="LotArea for Choosing a House",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)+
labs(x="LotArea for Choosing a House in square feet",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
ggplot(data=trDF, aes(x=(SalePrice)/1000))+
geom_density(fill="cyan",color="black")+ hw +
labs(x="HousePrice in $100k",
y="Density",
title=paste("House Price Predictions",sep="\n")) + hw
ggplot(data=trDF, aes(x=LotArea,group=ExterQual,fill= ExterQual))+
geom_density(color="black",adjust=2,alpha=.5)+
xlim(1000,10000) + labs(x="Lot Area",
y="Density",
title=paste("House Price Predictions",sep="\n")) + hw
ggplot(data=trDF, aes(x=LotArea,group=ExterQual,fill= ExterQual))+
geom_density(color="black",adjust=2,alpha=.5)+
xlim(1000,10000) + labs(x="Lot Area in square feet",
y="Density",
title=paste("House Price Predictions",sep="\n")) + hw
ggplot(data=trDF, aes(x=trDF$GrLivArea))+
geom_histogram(fill="cyan",color="black",bins=50) + labs(x="Ground Living Area in Square Feet",
y="Count",
title=paste("House Price Predictions",sep="\n"))+ hw
View(na_count)
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)+
labs(x="LotArea for Choosing a House in square feet",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
windows(width=10, height=7)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Proximity to various conditions') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=10, height=7)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)+
labs(x="LotArea for Choosing a House in square feet",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
scat <- ggplot(trDF, aes( x= LotArea , y=(SalePrice)/1000 ))+ xlim(1000,10000)
scat + geom_point() + stat_smooth() +hw
scat + geom_point( aes( color = BldgType) ) + hw
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)+
labs(x="LotArea for Choosing a House in square feet",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
library(ggplot2)
hw <- theme_gray()+ theme(
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5),
plot.caption=element_text(hjust=-.5),
strip.text.y = element_blank(),
strip.background=element_rect(fill=rgb(.9,.95,1),
colour=gray(.5), size=.2),
panel.border=element_rect(fill=FALSE,colour=gray(.70)),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(0.10,"cm"),
panel.spacing.y = unit(0.05,"cm"),
axis.ticks=element_blank(),
axis.text=element_text(colour="black"),
axis.text.y=element_text(margin=margin(0,3,0,3)),
axis.text.x=element_text(margin=margin(-1,0,3,0))
)
scat <- ggplot(trDF, aes( x= LotArea , y=(SalePrice)/1000 ))+ xlim(1000,10000)
scat + geom_point() + stat_smooth() +hw
scat + geom_point( aes( color = BldgType) ) + hw
scat + geom_point(aes(color=BldgType))+ facet_wrap(~BldgType) + hw +
xlim(1000,10000)+ ylim(0,500)+
labs(x="LotArea for Choosing a House in square feet",
y="HousePrice in $100k",
title=paste("House Price Predictions",sep="\n"),
color="Building type") + hw
windows(width=10, height=7)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Proximity to various conditions') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
library(ggplot)
library(ggplot2)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Proximity to various conditions') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
setwd("C:/Users/Nikitha/Desktop/STAT515/finalproject")
library(sqldf)
df= read.csv('/Users/Nikitha/Desktop/STAT515/finalproject/dataset_finalproject_MCD.CSV')
sum(is.na(df))
colnames(df) = c('State', 'statecode', 'county', 'countycode', 'Deaths', 'Population', 'cruderate', 'ageadjrate','Ages','Causes')
SumbyState = YearSum = sqldf(' select State, sum(Deaths), sum(Population),
count(*), avg(cruderate), avg(ageadjrate) from df group by State')
SumbyState$pdr = SumbyState$`sum(Deaths)`*100/SumbyState$`sum(Population)`
colnames(SumbyState) = c('State', 'Deaths', 'Population', 'Frequency', 'cruderate', 'ageadjrate', 'PDR')
mmap = read.csv('/Users/Nikitha/Desktop/STAT515/finalproject/to_micromaps.csv')
mmap = mmap[,-1]
mmap$Deaths[is.na(mmap$Deaths)] <- median(mmap$Deaths, na.rm=TRUE)
mmap$Population[is.na(mmap$Population)] <- median(mmap$Population, na.rm=TRUE)
mmap$PDR[is.na(mmap$PDR)] <- median(mmap$PDR, na.rm=TRUE)
row.names(mmap) = mmap$id
q= ggplot(data=SumbyState, aes(x=SumbyState$State, y=SumbyState$PDR, fill = PDR)) +
xlab('States') + ylab('Death Rate')+ ggtitle('Percentage Death Rate by Population for USA States') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top",legend.spacing = c(0,1.0))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
q= ggplot(data=SumbyState, aes(x=SumbyState$State, y=SumbyState$PDR, fill = PDR)) +
xlab('States') + ylab('Death Rate')+ ggtitle('Percentage Death Rate by Population for USA States') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top",legend.spacing = c(0,1.0))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
mmap$Deaths[is.na(mmap$Deaths)] <- mean(mmap$Deaths, na.rm=TRUE)
mmap$Population[is.na(mmap$Population)] <- mean(mmap$Population, na.rm=TRUE)
mmap$PDR[is.na(mmap$PDR)] <- mean(mmap$PDR, na.rm=TRUE)
row.names(mmap) = mmap$id
med1<- mean(mmap$Deaths)
med2<- mean(mmap$Population)
med3<- mean(mmap$PDR)
windows(width=10, height=7)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Sale price in $100k') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
setwd("C:/Users/Nikitha/Desktop/STAT515/project")
library(MASS)
df = read.csv('train.csv')
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
coln = c('LotFrontage', 'Alley',
'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',
'Electrical', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish',
'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature')
train = df[ , !(names(df) %in% coln)]
trDF= train
library(ggplot2)
windows(width=10, height=7)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=10, height=7)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Sale price in $100k') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=10, height=7)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Sale price in $100k') + ylim(0,600)
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Sale price in $100k') + ylim(0,600)+
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=10, height=7)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') + ylim(0,600)
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') + ylim(0,600)+
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
windows(width=10, height=7)
q= ggplot(data=df, aes(x=df$BldgType, y= (SalePrice)/1000, fill = Condition1)) +  facet_grid(. ~ df$YrSold) +
xlab('Building types') + ylab('Sale price in $100k') +
ggtitle('House price predictions - building type vs conditions') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
library(ggplot2)
windows(width=10, height=7)
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +ylim(100,600)
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +ylim(100,600)+
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity",color = gray(0.2)) + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
q= ggplot(data=df, aes(x= SaleCondition , y= (SalePrice)/1000, fill = SaleType)) +  facet_grid(. ~ df$YrSold) +
xlab('Type of Sale conditions') + ylab('Sale Price in 100K') +
ggtitle('House price predictions - sale conditions vs sale price') +
geom_bar( position = "dodge", stat="identity") + theme(legend.position="top")
q + theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
corrplot(cordf,method = c("circle"),mar=c(1,1,1,1),title = 'Correlation Matrix')
library(corrplot)
train[] <- lapply(train, function(x) as.numeric(x))
df1 <- train[1:20]
cordf <-  cor(df1)
corrplot(cordf,method = c("circle"),mar=c(1,1,1,1),title = 'Correlation Matrix')
anova(fit,upfit)
df2= df[ , colSums(is.na(df)) == 0]
library(randomForest)
model <- randomForest(SalePrice ~ . , data = df2, ntree=500, importance = T)
varImpPlot(model, sort = T, n.var = 5, scale = TRUE, title=('Importance Matrix'))
plot(model)
test = train[1:200,]
train = train[201:1460,]
fit <- lm(SalePrice ~ . , data = train)
fit1 <- lm(SalePrice ~  ., data = train)
fit2 <- lm(SalePrice ~ GrLivArea , data = train)
fit3 <- lm(SalePrice ~ MSSubClass + LotArea + Street + LotShape + LandContour +
Utilities + LandSlope + Neighborhood + Condition2 + BldgType +
HouseStyle + OverallQual + OverallCond + YearBuilt + RoofStyle +
RoofMatl + Exterior1st + MasVnrType + MasVnrArea + ExterQual +
BsmtFinSF1 + HeatingQC + X1stFlrSF + X2ndFlrSF + BsmtFullBath +
FullBath + BedroomAbvGr + KitchenAbvGr + KitchenQual + TotRmsAbvGrd +
Functional + Fireplaces + GarageCars + WoodDeckSF + ScreenPorch +
YrSold + SaleCondition, data = train)
upfit <- step(fit, direction = 'backward', steps = 100) # we see that Upfit has better Adj-R squared
modelCol = c('MSZoning', 'LotArea', 'Street', 'LandContour', 'Utilities', 'LotConfig',
'LandSlope', 'Neighborhood', 'Condition1',
'Condition2', 'BldgType', 'OverallQual', 'OverallCond', 'YearBuilt',
'YearRemodAdd', 'RoofStyle', 'RoofMatl',  'Exterior1st', 'MasVnrType',
'MasVnrArea',  'ExterQual', 'Foundation',  'BsmtFinSF1', 'BsmtFinSF2',
'BsmtUnfSF',  'X1stFlrSF',  'X2ndFlrSF',  'FullBath',  'BedroomAbvGr',
'KitchenAbvGr',  'KitchenQual',  'Functional',  'Fireplaces',  'GarageCars',
'GarageArea',  'WoodDeckSF', 'OpenPorchSF', 'ScreenPorch', 'PoolArea',
'MoSold', 'SaleType')
par(mfrow=c(2,2))
plot(fit)
plot(upfit)
anova(fit,upfit)
setwd("C:/Users/Nikitha/Desktop/STAT515/project")
setwd("C:/Users/Nikitha/Desktop/STAT515/project")
setwd("C:\\Users\\Nikitha\\Desktop\\GMU\\Spring - 2017\\STAT515\\project")
library(MASS)
df = read.csv('train.csv')
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
coln = c('LotFrontage', 'Alley',
'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',
'Electrical', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish',
'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature')
train = df[ , !(names(df) %in% coln)]
trDF= train
library(corrplot)
train[] <- lapply(train, function(x) as.numeric(x))
df1 <- train[1:20]
cordf <-  cor(df1)
corrplot(cordf,method = c("circle"),mar=c(1,1,1,1),title = 'Correlation Matrix')
df2= df[ , colSums(is.na(df)) == 0]
library(randomForest)
model <- randomForest(SalePrice ~ . , data = df2, ntree=500, importance = T)
varImpPlot(model, sort = T, n.var = 5, scale = TRUE, title=('Importance Matrix'))
plot(model)
test = train[1:200,]
train = train[201:1460,]
fit <- lm(SalePrice ~ . , data = train)
fit1 <- lm(SalePrice ~  ., data = train)
fit2 <- lm(SalePrice ~ GrLivArea , data = train)
fit3 <- lm(SalePrice ~ MSSubClass + LotArea + Street + LotShape + LandContour +
Utilities + LandSlope + Neighborhood + Condition2 + BldgType +
HouseStyle + OverallQual + OverallCond + YearBuilt + RoofStyle +
RoofMatl + Exterior1st + MasVnrType + MasVnrArea + ExterQual +
BsmtFinSF1 + HeatingQC + X1stFlrSF + X2ndFlrSF + BsmtFullBath +
FullBath + BedroomAbvGr + KitchenAbvGr + KitchenQual + TotRmsAbvGrd +
Functional + Fireplaces + GarageCars + WoodDeckSF + ScreenPorch +
YrSold + SaleCondition, data = train)
upfit <- step(fit, direction = 'backward', steps = 100) # we see that Upfit has better Adj-R squared
View(trDF)
modelCol = c('MSZoning', 'LotArea', 'Street', 'LandContour', 'Utilities', 'LotConfig',
'LandSlope', 'Neighborhood', 'Condition1',
'Condition2', 'BldgType', 'OverallQual', 'OverallCond', 'YearBuilt',
'YearRemodAdd', 'RoofStyle', 'RoofMatl',  'Exterior1st', 'MasVnrType',
'MasVnrArea',  'ExterQual', 'Foundation',  'BsmtFinSF1', 'BsmtFinSF2',
'BsmtUnfSF',  'X1stFlrSF',  'X2ndFlrSF',  'FullBath',  'BedroomAbvGr',
'KitchenAbvGr',  'KitchenQual',  'Functional',  'Fireplaces',  'GarageCars',
'GarageArea',  'WoodDeckSF', 'OpenPorchSF', 'ScreenPorch', 'PoolArea',
'MoSold', 'SaleType')
actual = test$SalePrice
test = test[,1:63]
pred1 = predict(fit, test)
pred2 = predict(upfit, test)
test1 = df[1:200,1:80]
pred3 = predict(model, test1)
result = data.frame(actual, pred1, pred2, pred3)
result$err1 = (actual-pred1)*100/actual
result$err2 = (actual-pred2)*100/actual
result$err3 = (actual-pred3)*100/actual
library(caret)
postResample(pred1,actual) # Based on Non Missing Data fed Model
postResample(pred2,actual) # Best Because of Backward Regression
postResample(pred3,actual)  # low because Random forest is done on full dataset
barplot(table(df$SaleCondition), xlab= 'sale condition', ylab = 'id')
library(ggplot2)
hw <- theme_gray()+ theme(
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5),
plot.caption=element_text(hjust=-.5),
strip.text.y = element_blank(),
strip.background=element_rect(fill=rgb(.9,.95,1),
colour=gray(.5), size=.2),
panel.border=element_rect(fill=FALSE,colour=gray(.70)),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(0.10,"cm"),
panel.spacing.y = unit(0.05,"cm"),
axis.ticks=element_blank(),
axis.text=element_text(colour="black"),
axis.text.y=element_text(margin=margin(0,3,0,3)),
axis.text.x=element_text(margin=margin(-1,0,3,0))
)
scat <- ggplot(trDF, aes( x= LotArea , y=(SalePrice)/1000 ))+ xlim(1000,10000)
function (width, height, pointsize, record, rescale, xpinch,
ypinch, bg, canvas, gamma, xpos, ypos, buffered, title,
restoreConsole, clickToConfirm, fillOddEven, family = "",
antialias)
windows(width=10, height=7)
windows(width=10, height=7)
scat <- ggplot(trDF, aes( x= LotArea , y=(SalePrice)/1000 ))+ xlim(1000,10000)
scat + geom_point() + stat_smooth() +hw
